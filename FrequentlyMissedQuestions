Frequently Missed Questions from KodeKloud Docker Lab - 5/25/23

1. Delete all containers from host (you may have to stop both running and not running containers)

Solution: 

Docker stop $(docker ps -aq)

Docker rm $(docker ps -aq)


2. Given the port mapping, identify the hostports and container ports - 0.0.0.0:3456->3456/tcp, 0.0.0.0:38080->80/tcp

Ports exposed by Host: 3456 and 38080
Ports exposed by Container: 3456 and 80

3. Run an instance of the kodekloud/simple-webapp image with a tag blue, and map port 8080 on the container to 38282 on the host

Solution: docker run -p 38282:8080 kodekloud/simple-webapp:blue

Incorrect: docker run -p 38282:8080 -t blue kodekloud/simple-webapp

Explanation: image tags go behind the iamge name that comes last with a :

4. What is the Entrypoint configured on the mysql image?

cat Dockerfile-mysql | grep ENTRYPOINT

5. What is the final command run at startup when the wordpress image is run. Consider both Entrypoint and CMD commands (read carefully - the anwser should be 2 commands even though the question asks "what is the final command").

Solution: cat Dockerfile-wordpress - combine the contents of both ENTRYPOINT and CMD commands 


6. What is the command run at startup when the ubuntu image is run?

Solution: cat Dockerfile-ubuntu + inspect CMD command

7. Next, create a simple container called clickcounter with the image kodekloud/click-counter, link it to the redis container that we created in the previous task and then expose it on the host port 8085

The clickcounter app run on port 5000. 
if you are unsure, check the hints section for the exact commands.

Solution: docker run -d --name=clickcounter --link redis:redis -p 8085:5000 kodekloud/click-counter 

8. Create a Docker Compose file under the directory /root/clickcounter. Once done, run docker-compose up. The compose file should have the exact specifications as follows:
redis service specification - Imagine name should be redis:alpine.
clickcounter service specification - Image name should be kodekloud/click-counter. app is running on port 5000, and expose it on host port 8085 in the compose file.

Solution:

1. cd /root/clickcounter
2. touch docker-compose.yml
3. vi docker-compose.yml
4. services:
      redis:
       image: redis:alpine
      clickcounter:
       image: kodekloud/click-counter
       ports:
       - 8085:5000
   version: '3.0'
5. `ZZ
6. docker-compose up


9. Run a mysql container named mysql-db using the mysql image. Set database password to db_pass123

Solution: docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql

Note: to find the MYSQL_ROOT_PASSWORD enviornment variable, go to hub.docker.com, search for MYSQL image, and it will be located somewhere on the page. detatched mode just means you can still run other commands without the container taking over the terminal - you are running the container detatched, in the background. 

10. Explore the current setup, and identify the number of networks that exist on this system.

Solution: docker network ls

Incorrect: docker info

11. Run a container named alpine-2 using the alpine image and attach it to the none network.

Solution: docker run --name alpine-2 --network=none alpine

12. Create a new network named wp-mysql-network using the bridge driver. Allocate subnet 182.18.0.1/24. Configure Gateway 182.18.0.1

Solution: docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network 

13. Deploy a web application named webapp using the kodekloud/simple-webapp-mysql image. Expose the port to 38080 on the host.

The application makes use of two environment variable:
1: DB_Host with the value mysql-db. 
2: DB_Password with the value db_pass123.
Make sure to attach it to the newly created network called wp-mysql-network.

Also make sure to link the MySQL and the webapp container.

Solution: docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql

note that link 38080 to host means 38080L:8080 as host is 8080. Also, remember to use --link mysql-db:mysql-db. 






